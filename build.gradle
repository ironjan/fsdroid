def versionMajor = 0 // incompatible API changes
def versionMinor = 0 // added functionality in a backwards-compatible manner
def versionPatch = 10 // backwards-compatible bug fixes
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo1.maven.org/maven2' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://android-rome-feed-reader.googlecode.com/svn/maven2/releases' }
}

apply plugin: 'com.android.application'
apply plugin: 'android-apt'

configurations {
    apt
}


def getSourceSetName(variant) {
    return new File(variant.dirName).getName();
}


android {
    compileSdkVersion 19
    buildToolsVersion "20"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        // prevents Error: duplicate files during packaging of APK
        // no wildcard support yet
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings false
        checkAllWarnings true
        warningsAsErrors true
        noLines true
        showAll true
        htmlReport true
        checkReleaseBuilds true
    }


    defaultConfig {
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        minSdkVersion 8
        targetSdkVersion 19

        applicationId "de.upb.fsmi.fsdroid"
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "AUTHORITY", "\"de.fsmi.fsdroid.provider\""
            buildConfigField "String", "ACCOUNT_TYPE", "\"fsdroid.ironjan.de\""
            buildConfigField "int", "SYNC_INTERVAL", "15 * 60" // 1 minutes

        }

        release {
            buildConfigField "String", "AUTHORITY", "\"de.fsmi.fsdroid.provider\""
            buildConfigField "String", "ACCOUNT_TYPE", "\"fsdroid.ironjan.de\""
            buildConfigField "int", "SYNC_INTERVAL", "60 * 60 * 12" // 12 hours
        }
    }

    if (project.hasProperty("fsdroid.signing") && new File(project.property("fsdroid.signing") + ".gradle").exists()) {
        apply from: project.property("fsdroid.signing") + ".gradle";
    }
}

dependencies {
    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'org.slf4j:slf4j-android:1.7.7'
    compile 'com.j256.ormlite:ormlite-android:4.48'

    apt "org.androidannotations:androidannotations:3.1"
    compile "org.androidannotations:androidannotations-api:3.1"

    compile 'com.nineoldandroids:library:2.4.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def version = dependency.version
                if (!version.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def versions = metadata.versioning.versions.version.collect { it.text() }
                        versions.removeAll { it.toLowerCase().contains('alpha') }
                        versions.removeAll { it.toLowerCase().contains('beta') }
                        versions.removeAll { it.toLowerCase().contains('rc') }
                        def newest = versions.max()
                        if (version != newest) {
                            println "$group:$name $version -> $newest"
                        }
                    } catch (FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch (org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}
